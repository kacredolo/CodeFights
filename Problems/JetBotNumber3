/*
 * CodeFights : Jet Company Bot : Problem 3
 * 
 * Started with a naive solution (at bottom), went to a priority-queue system(middle), ended with a dynamic programming setup (top)
 *
 *
Jet is building a new feature designed to significantly reduce order delivery times. However, faster delivery sometimes means higher shipping fees, and for cost-conscious customers this might be a problem. Your task is to implement a function that finds the fastest delivery time for a given order, taking into account that the customer doesn't want to pay more than maxPrice.

Consider a customer's basket of items. You are given a list of available vendors from which you can order these items. For each vendor you know the products they provide with their price (vendorProducts) and the time it will take to deliver them (vendorsDelivery). Find the vendors that should be chosen so that the total price of items in the basket is not greater than the maxPrice, while keeping delivery time to a minimum. The delivery time is the maximum delivery time of all chosen vendors.

You should only choose vendors you're going to buy something from. It is guaranteed that there is always exactly one solution.

Example

For maxPrice = 7, vendorsDelivery = [5, 4, 2, 3] and

vendorsProducts = [[1, 1, 1],
                   [3, -1, 3],
                   [-1, 2, 2],
                   [5, -1, -1]]
the output should be
minimalBasketPrice(maxPrice, vendorsDelivery, vendorsProducts) = [1, 2].

There are three items in the basket, so here is the list of options:

although vendor 0 can provide all items for the lowest price, it will take 5 days to deliver them;
vendors 1 and 2 can deliver all items in 4 and 2 days respectively, so in 4 days all of the items will have been delivered. It would cost 3 + 2 + 2 = 7 (note that the 2nd 0-based item is provided by both vendors, but since the price at vendor number 2 is lower, that's where we would purchase it);
vendors 2 and 3 will deliver everything in just 3 days, but it would cost 2 + 2 + 5 = 9, which is too much.
Thus, vendors 1 and 2 should be chosen to fulfill the order.

Input/Output

[execution time limit] 0.5 seconds (cpp)

[input] integer maxPrice

The maximum amount of money the customer is willing to pay.

Guaranteed constraints:
1 ≤ maxPrice ≤ 106

[input] array.integer vendorsDelivery

For each valid i, vendorsDelivery[i] is the number of days it will take the ith vendor to deliver the goods.

Guaranteed constraints:
1 ≤ vendorsDelivery.length ≤ 100
1 ≤ vendorsDelivery[i] ≤ 106 + 1

[input] array.array.integer vendorsProducts

Rectangular matrix with vendorsDelivery.length rows. The number of its columns equals the number of items in the basket.
If vendors[i][j] > 0, then the ith vendor provides the jth item, and it costs vendors[i][j].
vendors[i][j] = -1 otherwise, which means that the ith vendor doesn't provide the jth item.

Guaranteed constraints:
vendorsProducts.length = vendorsDelivery.length,
1 ≤ vendorsProducts[0].length ≤ 100,
-1 ≤ vendorsProducts[i][j] ≤ 106.

[output] array.integer

A sorted array of 0-based indices of the vendors that should be chosen to fulfill the order.

The order is fulfilled if for each item j (0 ≤ j < vendors[0].length) there is a vendor which provides it.

*/



//Third Implementation(First Two Saved for Posterity)
//Dynamic Programming attempt (Should be O(n * k * maxPrice)??)
std::vector<int> minimalBasketPrice(int maxPrice, std::vector<int> vendorsDelivery, std::vector<std::vector<int>> vendorsProducts) {
    vector<vector<int>> vendors(maxPrice+1, vector<int>());
    vector<int> ships(maxPrice+1, -1);
    ships[0] = 0;
    for(int i=0; i<vendorsProducts[0].size(); i++){
        vector<int> currentS(maxPrice+1, -1);
        vector<vector<int>> currentV(maxPrice+1, vector<int>());
        for(int m=0; m<vendorsProducts.size(); m++){
            int price = vendorsProducts[m][i];
            if(price != -1){
                for(int n=0; n<=maxPrice - price; n++){
                    if(ships[n] > -1 && (currentS[n + price] == -1 || currentS[n+price] > max(ships[n], vendorsDelivery[m]) )){
                        currentS[n+price] = max(ships[n], vendorsDelivery[m]);
                        currentV[n+price] = vendors[n];
                        currentV[n+price].push_back(m); 
                    }
                }
            }
        }
        vendors = currentV;
        ships = currentS;
    }
    
    int bestShipping = INT_MAX;
    int bestIndex = -1;
    for(int m=0; m<=maxPrice; m++){
        if(ships[m] != -1 && ships[m] < bestShipping){
            bestShipping = ships[m];
            bestIndex = m;
        }
    }
    return bestIndex == -1 ? vector<int>() : cleanUpList(vendors[bestIndex]);
}

//Gets rid of duplicates and sorts the vector, ready for the answer
vector<int> cleanUpList(vector<int> vendors){
    sort(vendors.begin(), vendors.end());
    for(int m=1; m<vendors.size(); m++){
        if(vendors[m] == vendors[m-1]){
            vendors.erase(vendors.begin() + m);
            m--;
        }
    }
    return vendors;
}





/*
//Second implementation (First Implementation commented below this one)
//Uses Priority Queue to skip the majority of work and only worry about the lowest shipping times first
//Will return immediately upon coming across a vendorList that has all items fulfilled (guaranteed lowest shipping in priority queue)

struct vendorList{
    vector<int> vendors;
    int shippingTime;
    int totalCost;
    vendorList(vector<int> v, int sT, int tC){
        vendors = v;
        shippingTime = sT;
        totalCost = tC;
    }
};

//Sort the priority queue by shipping time. Use greater-than because priority queue typically keeps the highest in front,
//and we want reverse
struct leastShippingTime
{
  bool operator()(const vendorList& v1, const vendorList& v2) const
  {
    return v1.shippingTime == v2.shippingTime ? v1.vendors.size() == v2.vendors.size() ? v1.totalCost > v2.totalCost : v1.vendors.size() > v2.vendors.size() : v1.shippingTime > v2.shippingTime;
  }
};

std::vector<int> minimalBasketPrice(int maxPrice, std::vector<int> vendorsDelivery, std::vector<std::vector<int>> vendorsProducts) {
    priority_queue<vendorList, vector<vendorList>, leastShippingTime> myQueue;
    
    int test = 0;
    myQueue.push(vendorList(vector<int>(), 0, 0));
    while(myQueue.empty() == false){
        test++;
        vendorList currList = myQueue.top();
        myQueue.pop();
        
        //Check if this current vendorList has satisfied all items, then clean up the vector and return it
        if(currList.vendors.size() == vendorsProducts[0].size()){
            cout<<test<<endl;
            return cleanUpList(currList.vendors);
        }
        
        int itemNumber = currList.vendors.size();
        
        int bestShippingTime = INT_MAX;
        int bestPrice = INT_MAX;
        for(int m=0; m<vendorsProducts.size(); m++){
            //Check if its a valid item with this vendor, and whether itll exceed the maxprice
            if(vendorsProducts[m][itemNumber] != -1 
                && currList.totalCost + vendorsProducts[m][itemNumber] <= maxPrice){
                
                vendorList newList = currList;
                newList.vendors.push_back(m);
                newList.totalCost += vendorsProducts[m][itemNumber];
                newList.shippingTime = max(newList.shippingTime, vendorsDelivery[m]);
                myQueue.push(newList);
            }
        }
    }
    
    return vendorsDelivery;
}

//Gets rid of duplicates and sorts it, ready for the answer
vector<int> cleanUpList(vector<int> vendors){
    sort(vendors.begin(), vendors.end());
    for(int m=1; m<vendors.size(); m++){
        if(vendors[m] == vendors[m-1]){
            vendors.erase(vendors.begin() + m);
        }
    }
    return vendors;
}
*/


    
    
    
    

/*
//Naive Solution, not yet submitted so I don't know if time constraints are a problem
//Could redo it with a priority queue, checking the ones with least shipping first

std::vector<int> minimalBasketPrice(int maxPrice, std::vector<int> vendorsDelivery, std::vector<std::vector<int>> vendorsProducts) {
    vector<int> result;
    return cleanUpList(recursiveSol(vendorsProducts, vendorsDelivery, 0, 0, maxPrice, 0, result));
}

//Recursive Solution O(2^n)
//Try each permutation, and take the one that is below maxPrice with the least shipping time
vector<int> recursiveSol(vector<vector<int>> &vP, vector<int> &sT, int itemNumber, int totalPrice, int &targetPrice, int shippingTime, vector<int> vendorsUsed){
    if(itemNumber >= vP[0].size() && totalPrice <= targetPrice)
        return vendorsUsed;
    else if(totalPrice > targetPrice || itemNumber >= vP[0].size())
        return vector<int>();
    
    int bestTime = INT_MAX;
    vector<int> bestVendors;
    for(int m=0; m<vP.size(); m++){
        if(vP[m][itemNumber] != -1){
            vendorsUsed.push_back(m);
            vector<int> temp = recursiveSol(vP, sT, itemNumber+1, totalPrice + vP[m][itemNumber], targetPrice, max(sT[m], shippingTime), vendorsUsed);
            int tempTime = getWorstShipping(sT, temp);
            if(tempTime != -1 && tempTime < bestTime){
                bestTime = tempTime;
                bestVendors = temp;
            }
            vendorsUsed.pop_back();
        }
    }
    return bestVendors;
}

//Goes through the vendors added and finds the max shipping time among them
int getWorstShipping(vector<int> &shippingTimes, vector<int> &vendorsUsed){
    int worst = -1;
    for(int m=0; m<vendorsUsed.size(); m++){
        if(shippingTimes[vendorsUsed[m]] > worst)
            worst = shippingTimes[vendorsUsed[m]];
    }
    return worst;
}

//Gets rid of duplicates and sorts it, ready for the answer
vector<int> cleanUpList(vector<int> vendors){
    sort(vendors.begin(), vendors.end());
    for(int m=1; m<vendors.size(); m++){
        if(vendors[m] == vendors[m-1]){
            vendors.erase(vendors.begin() + m);
        }
    }
    return vendors;
}
*/
